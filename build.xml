<?xml version="1.0"?>
<project name="MidCOM" default="help" basedir=".">
    <!-- edit the properties in this file to your liking.
    -->
    <property file="build.properties"  />
    <property name="absolute_basedir" value="" />
    <resolvepath propertyName="absolute_basedir" file="${project.basedir}"/>

    <taskdef classname="build.installMidcomDir"
             name="installMidcomDir"
             classpath="/${project.basedir}"
    />
    <taskdef classname="build.makeProjectList"
                     name="makeProjectList"
                     classpath="/${project.basedir}"
            />
    <taskdef classname="build.installMidcomCore"
                     name="installMidcomCore"
                     classpath="/${project.basedir}"
            />
    <taskdef classname="build.packJavascripts"
                         name="packJavascripts"
                         classpath="/${project.basedir}"
                />
    <taskdef classname="build.packageMidCOM"
                         name="packageMidCOM"
                         classpath="/${project.basedir}"
                />
    <taskdef classname="build.packageMidCOMcore"
                         name="packageMidCOMcore"
                         classpath="/${project.basedir}"
                />
 
    <!-- task to package static-icons for now -->
    <taskdef classname="build.packageStatic"
                             name="packageStatic"
                             classpath="/${project.basedir}"
                    />
    <taskdef classname="build.generateSchemaFile"
                         name="generateSchemaFile"
                         classpath="/${project.basedir}"
                />
    <taskdef classname="build.importStyle"
                             name="importStyle"
                             classpath="/${project.basedir}"
                    />
    <taskdef classname="build.createCrud"
                             name="createCrud"
                             classpath="/${project.basedir}"
                    />


    <target name="schemafile">
        <generateSchemaFile root="${project.basedir}" returnProperty="fileLocation" />
        <echo>
    The includes file has been saved to ${fileLocation}. You must copy this
    file to the Midgard schema directory, usually /usr/share/midgard/schema.
        </echo>
    </target>
    <target name="packjs">
        <mkdir dir="${target_dir}"/>
        <packJavascripts
            action="pack"
            path="${path}"
            target_dir="${target_dir}"
            returnProperty="statistics"
        >
        </packJavascripts>
        <echo>${statistics}</echo>
    </target>
    <target name="unpackjs">
        <mkdir dir="${target_dir}"/>
        <packJavascripts
            action="unpack"
            path="${path}"
            target_dir="${target_dir}"
            returnProperty="statistics"
        >
        </packJavascripts>
        <echo>${statistics}</echo>
    </target>
    <target name="packageCore">
        <mkdir dir="${target_dir}"/>
        <packageMidCOMcore
            path="${project.basedir}/midcom.core"
            package="midcom"
            template="${project.basedir}/midcom.core/package-template.xml"
            target_dir="${target_dir}"
            returnProperty="pear_name"
        >
        </packageMidCOMcore>
        <echo>Package ${pear_name} created in ${target_dir}</echo>
    </target>

    <target name="package">
        <mkdir dir="${target_dir}"/>
        <packJavascripts
            action="pack"
            path="${module}"
            target_dir="${target_dir}"
            returnProperty="statistics"
            />
        <packageMidCOM
            path="${project.basedir}"
            package="${module}"
            target_dir="${target_dir}"
            returnProperty="pear_name"
        >
        </packageMidCOM>
        <packJavascripts
            action="unpack"
            path="${module}"
            target_dir="${target_dir}"
            returnProperty="statistics"
        >
        </packJavascripts>
        <echo>Package ${pear_name} created in ${target_dir}</echo>
    </target>
    <target name="package-all">
        <makeProjectList path="${project.basedir}"
                         returnProperty="projects" />
        <foreach list="${projects}" param="module" target="package"/>
    </target>
    <target name="help">
        <echo>
Usage:
To install a symlinked version of midcom:
    phing install [ -Dinstall_dir="somedir" ]
To pack javascripts inside given folder and its subfolders:
	phing packjs -Dpath=pathtofolder
To unpack javascripts inside given folder and its subfolders:
	phing unpackjs -Dpath=pathtofolder
To create a pear package of a module:
    phing package -Dmodule=com.example.module
To create a new module:
    phing scaffold -Dmodule=com.example.mymodule
To generate a suggested schemafile to place in the midgard schemadirectory:
	phing schemafile
To generate a crud scaffold, you need to run the following:
	phing crud -Dmodule=module.name -Dtype=module_name_drinking -Dschema=/path/to/mgdschema.xml
			You can set install_dir, target_dir and other vars in build.properties.
    phing schemafile
            [DEPRECIATED]]You can set install_dir, target_dir and other vars in build.properties.
Current settings:
install_dir = ${install_dir} // this is the dir that is linked to this checkout.
target_dir  = ${target_dir} // this is where pear packages are saved.

        </echo>
    </target>

    <target name="install">
        <mkdir dir="${install_dir}" />
        <mkdir dir="${lib_dir}" />
        <mkdir dir="${static_dir}" />
        <phingcall target="install_midcom"/>
        <phingcall target="install_static_packages" />
        <makeProjectList path="${project.basedir}"
                         returnProperty="projects" />
        <foreach list="${projects}" param="project" target="install_module_symlink"/>
    </target>
    <!-- todo: add when I get a beter idea on how to exit if the user says no.
    <target name="clean">
        <echo>================================================================================</echo>
        <echo>This will delete the ${install_dir}/lib and ${install_dir}/static directories</echo>
        <input propertyname="deleteOk" promptChar=":" defaultValue="false" >Are you sure?</input>
        <echo>================================================================================</echo>
        <fail unless="deletOk" message="Clean aborted" />
        <echo>Deleting...</echo>
        <delete dir="${install_dir}/lib"  />
        <delete dir="${install_dir}/static"  />
    </target>
    -->
    <target name="install_static_packages">
        <resolvePath propertyName="static_path" file="${project.basedir}/static"/>
        <resolvePath propertyName="template_path" file="${project.basedir}/../templates"/>
        <exec
            command="ln -s ${static_path}/stock-icons ${static_dir}/stock-icons"
            dir="${static_path}" />
        <exec
            command="ln -s ${static_path}/Javascript_protoToolkit ${static_dir}/Javascript_protoToolkit"
            dir="${static_path}" />
        <exec
            command="ln -s ${static_path}/jQuery ${static_dir}/jQuery"
            dir="${static_path}" />
        <exec
            command="ln -s ${template_path}/* ${static_dir}/"
                dir="${template_path}" />
    </target>
    <target name="install_midcom">
        <mkdir dir="${lib_dir}/midcom" />
        <installMidcomCore  install_dir="${lib_dir}"
                        project_dir="${absolute_basedir}"
                        static_dir="${static_dir}"
                        schema_dir="${schema_dir}"
                        sql_dir="${sql_dir}"
        />
    </target>
    <target name="install_module_symlink">
        <echo>Installing to ${install_dir} </echo>
        <installMidcomDir install_dir="${lib_dir}"
                        project_dir="${absolute_basedir}"
                        module="${project}"
                        static_dir="${static_dir}"
                        schema_dir="${schema_dir}"
                        sql_dir="${sql_dir}"
                        umask="${install_umask}" />
    </target>
    <target name="crud" >
		<php function="str_replace" returnProperty="module_dir_basic">
			<param value="."/>
			<param value="/"/>
  		    <param value="${module}"/>
		</php>
		<!-- it is practical to have the basic moduledir for expansion in the files -->
		<property name="module_dir" value="${module}"/>
		<php function="str_replace" returnProperty="module_class">
			<param value="."/>
			<param value="_"/>
  		    <param value="${module}"/>
		</php>
		<php function="date" returnProperty="currentDate" >
			<param value="Y-m-d" />
		</php>

		<property name="template" value="${project.basedir}/crud" />
		<property name="module_dir" value="${project.basedir}/${module}" />
        <createCrud module="${module}"
                    root="${absolute_basedir}"
                    type="${type}"
                    schema="${schema}"
        />
		<copy todir="${module_dir}/styles">
			 <filterchain>
                <expandproperties/>

             </filterchain>
             <mapper type="regexp" from="(.+)" to="${type}-\1.php"/>
			<fileset dir="${template}/style/" >
				<include name="*.php" />
			</fileset>
		</copy>

		<copy todir="${module_dir}/handler">
			 <filterchain>
                <expandproperties/>
             </filterchain>
            <mapper type="regexp" from="(.+)" to="${type}-\1"/>
			<fileset dir="${template}/handler/">
				<include name="*.php" />
			</fileset>
		</copy>

	</target>
	<!-- this task creates a new project -->
	<target name="scaffold" depends="resolve_module_to_dir">
		<property name="template_dir" value="scaffold" />
		<phingcall target="create_module" />
    </target>

    <target name="resolve_module_to_dir" >

			<php function="str_replace" returnProperty="module_dir_basic">
				<param value="."/>
				<param value="/"/>
	  		    <param value="${module}"/>
			</php>
			<!-- it is practical to have the basic moduledir for expansion in the files -->
			<property name="module_dir" value="${module}"/>
			<php function="str_replace" returnProperty="module_class">
				<param value="."/>
				<param value="_"/>
	  		    <param value="${module}"/>
			</php>
			<php function="date" returnProperty="currentDate" >
				<param value="Y-m-d" />
			</php>
            <php function="str_replace" returnProperty="module_dir_basic">
                <param value="."/>
                <param value="/"/>
                <param value="${module}"/>
            </php>
            <!-- it is practical to have the basic moduledir for expansion in the files -->
            <property name="module_dir" value="${module}"/>
            <php function="str_replace" returnProperty="module_class">
                <param value="."/>
                <param value="_"/>
                <param value="${module}"/>
            </php>
            <php function="date" returnProperty="currentDate" >
                <param value="Y-M-D" />
            </php>

            <available
                file="${basedir}/${module_dir}"
                property="module_dir_exists"
                value="yes"
                type="dir"
            />
            <property name="midcom_root" value="${project.basedir}" />
        </target>

        <target name="create_module" if="module_dir" unless="module_dir_exists">
            <mkdir dir="${module_dir}"/>
            <mkdir dir="${module_dir}/config"/>
            <mkdir dir="${module_dir}/documentation"/>
            <mkdir dir="${module_dir}/midcom"/>
            <mkdir dir="${module_dir}/handler"/>
            <mkdir dir="${module_dir}/style" />
            <mkdir dir="${module_dir}/locale" />
            <mkdir dir="${module_dir}/static" />

            <input propertyname="module_description"
                defaultValue="MidCOM module ${module}"
                >
                Enter module description:
            </input>

            <copy todir="${module_dir}">
                 <filterchain>
                    <expandproperties/>
                 </filterchain>
                <fileset dir="${template_dir}/" >
                    <include name="*.php" />
                    <include name="*.xml" />
                    <include name="build.properties" />
                </fileset>
            </copy>

            <copy todir="${module_dir}/config">
                 <filterchain>
                    <expandproperties/>
                 </filterchain>
                <fileset dir="${template_dir}/config/">
                    <include name="*.inc" />
                </fileset>
            </copy>

            <copy todir="${module_dir}/documentation">
                 <filterchain>
                    <expandproperties/>
                 </filterchain>
                <fileset dir="${template_dir}/documentation">
                    <include name="CHANGES" />
                </fileset>
            </copy>
            <copy todir="${module_dir}/midcom">
                 <filterchain>
                    <expandproperties/>
                 </filterchain>
                <fileset dir="${template_dir}/midcom">
                    <include name="*.php" />
                </fileset>
            </copy>
            <copy todir="${module_dir}/handler">
                 <filterchain>
                    <expandproperties/>
                 </filterchain>
                <fileset dir="${template_dir}/handler">
                    <include name="*.php" />
                </fileset>
            </copy>
            <copy todir="${module_dir}/style">
                <filterchain>
                    <expandproperties/>
                </filterchain>
                <fileset dir="${template_dir}/style">
                    <include name="*.php" />
                </fileset>
            </copy>
            <copy todir="${module_dir}/locale">
                <filterchain>
                    <expandproperties/>
                </filterchain>
                <fileset dir="${template_dir}/locale">
                    <include name="default.*.txt" />
                </fileset>
            </copy>
        </target>

    <target name="package-static">
        <mkdir dir="${target_dir}"/>
        <packageStatic
            path="${project.basedir}/../static/"
            package="${package}"
            target_dir="${target_dir}"
            returnProperty="pear_name"
        >
        </packageStatic>
        <echo>Package ${pear_name} created in ${target_dir}</echo>
    </target>

    <target name="import_style" >
        <fail unless="style"
            message="You must set a template to upload. -Dstyle=[templatename]" />
        <resolvepath propertyName="template_dir" file="${project.basedir}/../templates"/>
        <importStyle template="${style}"
                     path="${template_dir}"

        />
    </target>

</project>

